#!/usr/bin/env bash
set -o errexit \
    -o pipefail

if [[ -n ${DEBUG} ]]; then
  set -o xtrace \
      -o verbose
fi

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

PATH=/usr/local/bin:$PATH
TMPDIR=${TMPDIR:-/tmp}

source "$(dirname $0)/common"

destination=${1}

if [[ -z ${destination} ]]; then
  log_fatal "usage: $0 <path/to/destination>"
fi

payload="$(mktemp "${TMPDIR}/artifactory-resource-request.XXXXXX")"

cat > "$payload" <&0

api_key="$(jq -r '.source.api_key // ""' < "${payload}")"
repository_id="$(jq -r '.source.repository_id // ""' < "${payload}")"
group_id="$(jq -r '.source.group_id // ""' < "${payload}")"
artifact_id="$(jq -r '.source.artifact_id // ""' < "${payload}")"
path_param="$(jq -r '.params.path // ""' < "${payload}")"
host="$(jq -r '.source.host // ""' < "${payload}")"

is_valid 'api_key' "${api_key}"
is_valid 'repository_id' "${repository_id}"
is_valid 'group_id' "${group_id}"
is_valid 'artifact_id' "${artifact_id}"
is_valid 'host' "${host}"

host=$(strip_last_slash "${host}")
path_param=$(strip_last_slash "${path_param}")

folder_exists "${destination}/${path_param}"

version=$(get_version "${payload}" "${destination}")
group_id_path=$(echo "${group_id}" | sed 's/\./\//g')
files=$(find "${destination}/${path_param}" -type f -name "*" -not -name "version" -not -name "_remote.repositories")
metadata_files='[]'

for abs_file in $files; do
  file=$(basename "${abs_file}")
  is_file_complies_with_artifact_specs "${artifact_id}" "${version}" "${file}"
done

for abs_file in $files; do
  file="$(basename "${abs_file}")"

  # md5="$(md5sum "${abs_file}" | cut -f 1 -d ' ')"
  # sha1="$(sha1sum "${abs_file}" | cut -f 1 -d ' ')"
  sha256="$(sha256sum "${abs_file}" | cut -f 1 -d ' ')"

  result=$(curl \
    "${curl_options[@]}" \
    -o - \
    -X PUT \
    -H "X-JFrog-Art-Api: ${api_key}" \
    --write-out "\n%{http_code}" \
    --silent \
    "${host}/${repository_id}/${group_id_path}/${artifact_id}/${version}/${file}")

  http_code="${result##*$'\n'}"
  req_output=$(echo "${result}" | sed '$d')

  if [[ ${http_code} -eq '404' ]]; then
    req_output=$(curl \
      "${curl_options[@]}" \
      -H "X-Checksum-Deploy: true" \
      -H "X-JFrog-Art-Api: ${api_key}" \
      -H "X-Checksum: ${sha256}" \
      -T "${abs_file}" \
      --silent \
      "${host}/${repository_id}/${group_id_path}/${artifact_id}/${version}/${file}")
  elif [[ ${http_code} -ne '201' ]]; then
    log "An error occured while trynig to create artifact ${file} by checksum"
    log "Request: curl ${curl_options[*]} -H 'X-JFrog-Art-Api:*****' -H \"X-Checksum: ${sha256}\" -T ${abs_file} --silent ${host}/${repository_id}/${group_id_path}/${artifact_id}/${version}/${file}"
    log "Error:${req_output}"
    exit 1
  fi

  metadata_files=$( jq ". + [\"${file}\"]" <<< "${metadata_files}" )
done

metadata_files="$( jq '[to_entries[]|{name: "file_\(.key)", value}]' <<< "${metadata_files}" )"
metadata_folder=$(folder_metadata "${payload}" "${destination}")
echo $(echo "\"${version}\"" | jq "{version: {ref: .}, metadata: $(echo ${metadata_folder} | jq ". + ${metadata_files}")}") >&3
exit 0
